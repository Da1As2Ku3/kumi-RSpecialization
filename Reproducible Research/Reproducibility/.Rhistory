install.packages("boot")
library(boot)
trainSpam$numType <-as.numeric(trainSpam$type)-1
hClusterUpdated <-hclust(dist(t(log10(trainSpam[,1:55]+1))))
library(kernlab)
data(spam)
# Perform the subsampling
set.seed(3435)
trainIndicator <-rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
trainSpam <-spam[trainIndicator==1,]
testSpam <-spam[trainIndicator==0,]
names(trainSpam)
head(trainSpam)
# summaries
table(trainSpam$type)
# make some plots
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
# We can also look at pairwise relationships between predictors
plot(log10(trainSpam[,1:4]+1))
hCluster <-hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated <-hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
trainSpam$numType <-as.numeric(trainSpam$type)-1
costFunction <-function(x,y)sum(x!=(y>0.5))
cvError <-rep(NA,55)
library(boot)
for(i in 1:55){
lmFormula <-reformulate(names(trainSpam[1],response="trainSpam$numType"))
glmFit <-glm(lmFormula,family="binomial",data=trainSpam)
cvError[i] <-cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
trainSpam$numType <-as.numeric(trainSpam$type)-1
costFunction <-function(x,y)sum(x!=(y>0.5))
cvError <-rep(NA,55)
library(boot)
for(i in 1:55){
lmFormula <-reformulate(names(trainSpam[1]))
glmFit <-glm(lmFormula,family="binomial",data=trainSpam)
cvError[i] <-cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
trainSpam$numType <-as.numeric(trainSpam$type)-1
costFunction <-function(x,y)sum(x!=(y>0.5))
cvError <-rep(NA,55)
library(boot)
for(i in 1:55){
lmFormula <-reformulate(names(trainSpam[1]))
glmFit <-glm(lmFormula,family="binomial",data=trainSpam)
cvError[i] <-cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
trainSpam$numType <-as.numeric(trainSpam$type)-1
costFunction <-function(x,y)sum(x!=(y>0.5))
cvError <-rep(NA,55)
library(boot)
# for(i in 1:55){
#  lmFormula <-reformulate(names(trainSpam[1],response="numType"))
#  glmFit <-glm(lmFormula,family="binomial",data=trainSpam)
#  cvError[i] <-cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
trainSpam$numType <-as.numeric(trainSpam$type)-1
costFunction <-function(x,y)sum(x!=(y>0.5))
cvError <-rep(NA,55)
library(boot)
# for(i in 1:55){
#  lmFormula <-reformulate(names(trainSpam[1],response="numType"))
#  glmFit <-glm(lmFormula,family="binomial",data=trainSpam)
#  cvError[i] <-cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
# }
# which predictor has minimum cross-validated error?
# names(trainSpam)[which.min(cvError)]
predictionModel <-glm(numType~charDollar,family="binomial",data=trainSpam)
predictionModel <-glm(numType~charDollar,family="binomial",data=trainSpam)
# get prediction on the test set
predictionTest <-predict(predictionModel,testspam)
predictionModel <-glm(numType~charDollar,family="binomial",data=trainSpam)
# get prediction on the test set
# predictionTest <-predict(predictionModel,testspam)
# predictedSpam <-rep("nonspam",dim(testSpam)[1])
predictionModel <-glm(numType~charDollar,family="binomial",data=trainSpam)
# get prediction on the test set
# predictionTest <-predict(predictionModel,testspam)
# predictedSpam <-rep("nonspam",dim(testSpam)[1])
# classify as spam for those with prob > 0.5
# predictedSpam[predictionModel$fitted>0.5]="spam"
# In logistic regression, we use probability to determine whether it is spam or not.
# classification table
table(predictedSpam,testSpam$type)
predictionModel <-glm(numType~charDollar,family="binomial",data=trainSpam)
# get prediction on the test set
# predictionTest <-predict(predictionModel,testspam)
# predictedSpam <-rep("nonspam",dim(testSpam)[1])
# classify as spam for those with prob > 0.5
# predictedSpam[predictionModel$fitted>0.5]="spam"
# In logistic regression, we use probability to determine whether it is spam or not.
# classification table
# table(predictedSpam,testSpam$type)
predictionModel <-glm(numType~charDollar,family="binomial",data=trainSpam)
# get prediction on the test set
# predictionTest <-predict(predictionModel,testspam)
# predictedSpam <-rep("nonspam",dim(testSpam)[1])
# classify as spam for those with prob > 0.5
# predictedSpam[predictionModel$fitted>0.5]="spam"
# In logistic regression, we use probability to determine whether it is spam or not.
# classification table
# table(predictedSpam,testSpam$type)
ErrorRate <-(61+458)/(1346+458+61+449)
ErrorRate # This is about 22.4%
