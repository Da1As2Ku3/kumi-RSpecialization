install.packages("quantmod")
library(quantmod)
install.packages("zoo")
install.packages("zoo")
library(zoo)
install.packages("xts")
library(xts)
install.packages("TTR")
library(TTR)
install.packages("quandl")
install.packages("Quandl")
library(Quandl)
install.packages("zoo")
install.packages("zoo")
library(zoo)
install.packages("TTR")
library(TTT)
library(TTR)
library(xts)
library(quantmod)
library(Quandl)
#specify to and from dates
from.dat <-as.Date("01/01/08",format="%m%d%y")
to.dat <-as.Date("12/31/10",format="%m%d%y")
#import MSFT data from Yahoo finance for the specified dates
getSymbols("MSFT",src="yahoo",from=from.dat,to=to.dat)
library(quantmod)
library(Quandl)
#specify to and from dates
from.dat <-as.Date("01/01/08",format="%m%d%y")
to.dat <-as.Date("12/31/10",format="%m%d%y")
#import MSFT data from Yahoo finance for the specified dates
getSymbols("MSFT",src="yahoo",from=from.dat,to=to.dat,verbose=TRUE)
library(xts)
library(TTR)
library(zoo)
library(quantmod)
library(Quandl)
#specify to and from dates
from.dat <-as.Date("01/01/08",format="%m%d%y")
to.dat <-as.Date("12/31/10",format="%m%d%y")
#import AAPL data from Yahoo finance for the specified dates
getSymbols("AAPL",src="yahoo",from=from.dat,to=to.dat,auto.assign=TRUE)
library(xts)
library(TTR)
library(zoo)
library(quantmod)
library(Quandl)
#specify to and from dates
from.dat <-as.Date("01/01/08",format="%m%d%y")
to.dat <-as.Date("12/31/10",format="%m%d%y")
#import AAPL data from Yahoo finance for the specified dates
getSymbols("AAPL",src="yahoo",from=from.dat,to=to.dat,auto.assign=TRUE)
install.packages("ridge")
library(ridge)
install.packages("foba")
library(foba)
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
data(Insurance)
inTrain <-createDataPartition(y=Insurance$Holders,p=0.7,list=FALSE)
training <-Insurance[inTrain,]
testing <-Insurance[-inTrain,]
modFit <-train(Holders~.,data=training,method="foba",lambda=5,k=4)
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
data(Insurance)
names(Insurance)
glimpse(Insurance)
tab1 <-table(Insurance$District)
tab1
tab2 <-table(Insurance$Age)
tab2
tab3 <-table(Insurance$Group)
tab3
cbind(tab1,tab2,tab3)
inTrain <-createDataPartition(y=Insurance$Holders,p=0.7,list=FALSE)
training <-Insurance[inTrain,]
testing <-Insurance[-inTrain,]
modFit <-lm.ridge(Holders~.,data=training,lambda=5)
modFit
#Note:the predictors are centered and scaled first before the regression is run
#lambda=5 is the tuning parameter
modFit$xm # returns column/predictor mean from the data
modFit$scale # returns the scaling performed on the predictors for the ridge regression
modFit$coef # returns the conditional coefficients Bj from the ridge regression
modFit$y # returns mean of outcome
#perform ridge regression with given outcome and predictors using caret package
modFit1 <-train(Holders~.,data=training,method="ridge",lambda=5)
library(elasticnet)
library(lars)
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
data(Insurance)
inTrain <-createDataPartition(y=Insurance$Holders,p=0.7,list=FALSE)
training <-Insurance[inTrain,]
testing <-Insurance[-inTrain,]
modFit <-train(Holders~.,data=training,method="foba",lambda=5,k=3)
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
data(Insurance)
inTrain <-createDataPartition(y=Insurance$Holders,p=0.7,list=FALSE)
training <-Insurance[inTrain,]
testing <-Insurance[-inTrain,]
modFit1 <-train(Holders~.,data=training,method="foba",lambda=5,K=3)
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
data(Insurance)
inTrain <-createDataPartition(y=Insurance$Holders,p=0.7,list=FALSE)
training <-Insurance[inTrain,]
testing <-Insurance[-inTrain,]
modFit1 <-train(Holders~.,data=training,method="foba",lambda=4,K=3)
library(MASS)
library(ggplot2)
library(dplyr)
library(caret)
data(Insurance)
inTrain <-createDataPartition(y=Insurance$Holders,p=0.7,list=FALSE)
training <-Insurance[inTrain,]
testing <-Insurance[-inTrain,]
modFit1 <-train(Holders~.,data=training,method="foba",lambda=4,k=3)
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(caret)
data(Insurance)
lasso <-lars(as,matrix(Insurance),y=Holders,type="lasso",trace=TRUE)
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(caret)
data(Boston)
dim(Boston)
names(Boston)
inTrain <-createDataPartition(y=Boston$tax,p=0.7,list=FALSE)
training <-Boston[inTrain,]
testing <-Boston[-inTrain,]
lasso <-lars(as.matrix(Boston),y=Boston$tax,type="lasso",trace=TRUE)#perform lasso regression by adding predictors one at time (or setting variables to 0)
lasso$lambda #returns the lambdas used for each step of the lasso regression
plot(lasso)
predict.lars(lasso,testing)
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(caret)
data(Boston)
dim(Boston)
names(Boston)
inTrain <-createDataPartition(y=Boston$tax,p=0.8,list=FALSE)#p=0.8 to make testing data small
training <-Boston[inTrain,]
testing <-Boston[-inTrain,]
lasso <-lars(as.matrix(Boston),y=Boston$tax,type="lasso",trace=TRUE)#perform lasso regression by adding predictors one at time (or setting variables to 0)
lasso$lambda #returns the lambdas used for each step of the lasso regression
plot(lasso)
predict.lars(lasso,testing)
cv.lars(as.matrix(Boston),y=Boston$tax,K=10,type="lasso",trace=TRUE)
lasso <-enet(as.matrix(Boston),y=Boston$tax,lambda=0)#perform elastic net regression on given predictors and outcome
plot(lasso)#print plot that shows the progression of the coefficients as they are set to zero one by one
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(caret)
data(Boston)
dim(Boston)
names(Boston)
inTrain <-createDataPartition(y=Boston$tax,p=0.8,list=FALSE)#p=0.8 to make testing data small
training <-Boston[inTrain,]
testing <-Boston[-inTrain,]
lasso <-lars(as.matrix(Boston),y=Boston$tax,type="lasso",trace=TRUE)#perform lasso regression by adding predictors one at time (or setting variables to 0)
lasso$lambda #returns the lambdas used for each step of the lasso regression
plot(lasso)
predict.lars(lasso,testing)
cv.lars(as.matrix(Boston),y=Boston$tax,K=10,type="lasso",trace=TRUE)
lasso1 <-enet(as.matrix(Boston),y=Boston$tax,lambda=0)#perform elastic net regression on given predictors and outcome
plot(lasso1)#print plot that shows the progression of the coefficients as they are set to zero one by one
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(caret)
data(Boston)
dim(Boston)
names(Boston)
inTrain <-createDataPartition(y=Boston$tax,p=0.8,list=FALSE)#p=0.8 to make testing data small
training <-Boston[inTrain,]
testing <-Boston[-inTrain,]
modFit <-train(tax~.,data=training,method="relaxo",lambda=5,phi=0.3)
library(relaxo)
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(relaxo)
library(caret)
data(Boston)
dim(Boston)
names(Boston)
inTrain <-createDataPartition(y=Boston$tax,p=0.8,list=FALSE)#p=0.8 to make testing data small
training <-Boston[inTrain,]
testing <-Boston[-inTrain,]
modFit <-train(tax~.,data=training,method="relaxo",lambda=5,phi=0.3)
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(relaxo)
library(caret)
data(Boston)
dim(Boston)
names(Boston)
inTrain <-createDataPartition(y=Boston$tax,p=0.8,list=FALSE)#p=0.8 to make testing data small
training <-Boston[inTrain,]
testing <-Boston[-inTrain,]
modFit <-train(tax~.,data=training,method="relaxo",lambda=5,phi=0.3)
warning()
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(relaxo)
library(caret)
data(Boston)
dim(Boston)
names(Boston)
inTrain <-createDataPartition(y=Boston$tax,p=0.8,list=FALSE)#p=0.8 to make testing data small
training <-Boston[inTrain,]
testing <-Boston[-inTrain,]
#modFit <-train(tax~.,data=training,method="relaxo",lambda=5,phi=0.3)
#modFit$finalModel
#pred1 <-predict(modFit,testing)
#pred1
#perform lasso regression
lasso.fit <-lars(as.matrix(Boston),y=Boston$tax,type="lasso",trace=TRUE)
#plot lasso regression model
plot(lasso.fit,breaks=FALSE,cex=0.75)
library(MASS)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(lars)
library(elasticnet)
library(relaxo)
library(caret)
data(Boston)
dim(Boston)
names(Boston)
inTrain <-createDataPartition(y=Boston$tax,p=0.7,list=FALSE)#p=0.8 to make testing data small
training <-Boston[inTrain,]
testing <-Boston[-inTrain,]
modFit <-train(tax~.,data=training,method="relaxo",lambda=5,phi=0.3)
